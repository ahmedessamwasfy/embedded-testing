
Securitysystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000082a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  0000082a  000008be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008000f2  008000f2  00000950  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000980  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ad  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a57  00000000  00000000  00002081  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b0f  00000000  00000000  00002ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  000035e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a8  00000000  00000000  00003860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000acf  00000000  00000000  00003e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000048d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a2 03 	jmp	0x744	; 0x744 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3f       	cpi	r26, 0xF2	; 242
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 ef       	ldi	r26, 0xF2	; 242
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 30       	cpi	r26, 0x05	; 5
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e7 03 	call	0x7ce	; 0x7ce <main>
  8a:	0c 94 13 04 	jmp	0x826	; 0x826 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EEPROM_write>:


void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE));
  92:	e1 99       	sbic	0x1c, 1	; 28
  94:	fe cf       	rjmp	.-4      	; 0x92 <EEPROM_write>

/* Set up address and data registers */
EEAR = uiAddress;
  96:	9f bb       	out	0x1f, r25	; 31
  98:	8e bb       	out	0x1e, r24	; 30
EEDR = ucData;
  9a:	6d bb       	out	0x1d, r22	; 29
/* Write logical one to EEMWE */
EECR |= (1<<EEMWE);
  9c:	e2 9a       	sbi	0x1c, 2	; 28
/* Start eeprom write by setting EEWE */
EECR |= (1<<EEWE);
  9e:	e1 9a       	sbi	0x1c, 1	; 28
  a0:	08 95       	ret

000000a2 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE));
  a2:	e1 99       	sbic	0x1c, 1	; 28
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <EEPROM_read>
/* Set up address register */
EEAR = uiAddress;
  a6:	9f bb       	out	0x1f, r25	; 31
  a8:	8e bb       	out	0x1e, r24	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
  aa:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
  ac:	8d b3       	in	r24, 0x1d	; 29
}
  ae:	08 95       	ret

000000b0 <GPIO_Init>:

static uint8_t GPIO_GroupState[GPIO_GROUPS_NUMBER] = {0};

/*A function to initialize all the GPIO Groups in the configurations*/
GPIO_CheckType GPIO_Init(void)
{
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	a4 e6       	ldi	r26, 0x64	; 100
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	0f 2e       	mov	r0, r31
  c0:	f2 ef       	ldi	r31, 0xF2	; 242
  c2:	ef 2e       	mov	r14, r31
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	ff 2e       	mov	r15, r31
  c8:	f0 2d       	mov	r31, r0
  ca:	24 ea       	ldi	r18, 0xA4	; 164
  cc:	30 e0       	ldi	r19, 0x00	; 0
			/*Data Control*/
			GPIODIR_REG(CfgPtr->PortId) |= (CfgPtr->PortMask & CfgPtr->PortDirection);
			/*Pad Control*/
			//GPIODATA_WRITE(0x00,CfgPtr->PortMask,CfgPtr->PortId) |= (CfgPtr->PortMask & CfgPtr->PortWrite);
			GPIODATA_READ(CfgPtr->PortMask,CfgPtr->PortId) |= (CfgPtr->PortDirection & CfgPtr->PortWrite);
			GPIO_GroupState[LoopIndex] = 1;
  ce:	11 e0       	ldi	r17, 0x01	; 1
	const GPIO_CfgType * CfgPtr;


	for(LoopIndex = 0; (LoopIndex < GPIO_GROUPS_NUMBER) && (ErrorFlag == 0); LoopIndex ++)
	{
		if(GPIO_ConfigParam[LoopIndex].PortId < PORTS_NUMBER)
  d0:	ec 91       	ld	r30, X
  d2:	e4 30       	cpi	r30, 0x04	; 4
  d4:	10 f5       	brcc	.+68     	; 0x11a <GPIO_Init+0x6a>
        {
           /*Enable port clock gate*/
            CfgPtr = & GPIO_ConfigParam[LoopIndex];
			/*Data Control*/
			GPIODIR_REG(CfgPtr->PortId) |= (CfgPtr->PortMask & CfgPtr->PortDirection);
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	e0 5a       	subi	r30, 0xA0	; 160
  da:	ff 4f       	sbci	r31, 0xFF	; 255
  dc:	e0 81       	ld	r30, Z
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	af 01       	movw	r20, r30
  e2:	ea 01       	movw	r28, r20
  e4:	6a 91       	ld	r22, -Y
  e6:	12 96       	adiw	r26, 0x02	; 2
  e8:	7c 91       	ld	r23, X
  ea:	12 97       	sbiw	r26, 0x02	; 2
  ec:	11 96       	adiw	r26, 0x01	; 1
  ee:	9c 91       	ld	r25, X
  f0:	11 97       	sbiw	r26, 0x01	; 1
  f2:	97 23       	and	r25, r23
  f4:	96 2b       	or	r25, r22
  f6:	98 83       	st	Y, r25
			/*Pad Control*/
			//GPIODATA_WRITE(0x00,CfgPtr->PortMask,CfgPtr->PortId) |= (CfgPtr->PortMask & CfgPtr->PortWrite);
			GPIODATA_READ(CfgPtr->PortMask,CfgPtr->PortId) |= (CfgPtr->PortDirection & CfgPtr->PortWrite);
  f8:	32 97       	sbiw	r30, 0x02	; 2
  fa:	90 81       	ld	r25, Z
  fc:	13 96       	adiw	r26, 0x03	; 3
  fe:	8c 91       	ld	r24, X
 100:	13 97       	sbiw	r26, 0x03	; 3
 102:	87 23       	and	r24, r23
 104:	89 2b       	or	r24, r25
 106:	80 83       	st	Z, r24
			GPIO_GroupState[LoopIndex] = 1;
 108:	f7 01       	movw	r30, r14
 10a:	11 93       	st	Z+, r17
 10c:	7f 01       	movw	r14, r30
 10e:	14 96       	adiw	r26, 0x04	; 4
	uint8_t ErrorFlag = 0;
	GPIO_CheckType RetVar;
	const GPIO_CfgType * CfgPtr;


	for(LoopIndex = 0; (LoopIndex < GPIO_GROUPS_NUMBER) && (ErrorFlag == 0); LoopIndex ++)
 110:	a2 17       	cp	r26, r18
 112:	b3 07       	cpc	r27, r19
 114:	e9 f6       	brne	.-70     	; 0xd0 <GPIO_Init+0x20>
			GPIODIR_REG(CfgPtr->PortId) |= (CfgPtr->PortMask & CfgPtr->PortDirection);
			/*Pad Control*/
			//GPIODATA_WRITE(0x00,CfgPtr->PortMask,CfgPtr->PortId) |= (CfgPtr->PortMask & CfgPtr->PortWrite);
			GPIODATA_READ(CfgPtr->PortMask,CfgPtr->PortId) |= (CfgPtr->PortDirection & CfgPtr->PortWrite);
			GPIO_GroupState[LoopIndex] = 1;
			RetVar = GPIO_OK;
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	01 c0       	rjmp	.+2      	; 0x11c <GPIO_Init+0x6c>
        }
		else
		{
			/*Invalid GroupId*/
			RetVar = GPIO_NOK;
 11a:	81 e0       	ldi	r24, 0x01	; 1
		}


	}
	return RetVar;
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	ff 90       	pop	r15
 124:	ef 90       	pop	r14
 126:	08 95       	ret

00000128 <GPIO_Write>:
GPIO_CheckType GPIO_Write(uint8_t GroupId,uint8_t GroupData)
{
	const GPIO_CfgType * CfgWrite;
	GPIO_CheckType ReturnVar;

	if (( GroupId <GPIO_GROUPS_NUMBER))
 128:	80 31       	cpi	r24, 0x10	; 16
 12a:	e0 f5       	brcc	.+120    	; 0x1a4 <GPIO_Write+0x7c>
	{

		CfgWrite =  & GPIO_ConfigParam[GroupId];
 12c:	90 e0       	ldi	r25, 0x00	; 0

		if ((CfgWrite->PortDirection == 0xff)&&(GPIO_GroupState[GroupId]==1 ))
 12e:	fc 01       	movw	r30, r24
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	ec 59       	subi	r30, 0x9C	; 156
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	22 81       	ldd	r18, Z+2	; 0x02
 13e:	2f 3f       	cpi	r18, 0xFF	; 255
 140:	99 f5       	brne	.+102    	; 0x1a8 <GPIO_Write+0x80>
 142:	fc 01       	movw	r30, r24
 144:	ee 50       	subi	r30, 0x0E	; 14
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	20 81       	ld	r18, Z
 14a:	21 30       	cpi	r18, 0x01	; 1
 14c:	79 f5       	brne	.+94     	; 0x1ac <GPIO_Write+0x84>
		{
		    if(GroupData == 0x00)
 14e:	61 11       	cpse	r22, r1
 150:	14 c0       	rjmp	.+40     	; 0x17a <GPIO_Write+0x52>
            {
                GPIODATA_WRITE(GroupData,CfgWrite->PortMask,CfgWrite->PortId) &= ~(CfgWrite->PortMask);
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	fc 01       	movw	r30, r24
 15c:	ec 59       	subi	r30, 0x9C	; 156
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	a0 81       	ld	r26, Z
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	a0 5a       	subi	r26, 0xA0	; 160
 166:	bf 4f       	sbci	r27, 0xFF	; 255
 168:	ac 91       	ld	r26, X
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	9c 91       	ld	r25, X
 16e:	81 81       	ldd	r24, Z+1	; 0x01
 170:	80 95       	com	r24
 172:	89 23       	and	r24, r25
 174:	8c 93       	st	X, r24
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	08 95       	ret
		        ReturnVar = GPIO_OK;
            }
            if(GroupData == 0xff)
 17a:	6f 3f       	cpi	r22, 0xFF	; 255
 17c:	c9 f4       	brne	.+50     	; 0x1b0 <GPIO_Write+0x88>
            {
                GPIODATA_WRITE(GroupData,CfgWrite->PortMask,CfgWrite->PortId) |= (CfgWrite->PortMask);
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	fc 01       	movw	r30, r24
 188:	ec 59       	subi	r30, 0x9C	; 156
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	a0 81       	ld	r26, Z
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	a0 5a       	subi	r26, 0xA0	; 160
 192:	bf 4f       	sbci	r27, 0xFF	; 255
 194:	ac 91       	ld	r26, X
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	9c 91       	ld	r25, X
 19a:	81 81       	ldd	r24, Z+1	; 0x01
 19c:	89 2b       	or	r24, r25
 19e:	8c 93       	st	X, r24
		        ReturnVar = GPIO_OK;
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	08 95       	ret
		}

	}
	else
	{
		ReturnVar = GPIO_NOK ;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	08 95       	ret

	    }

		else
		{
			ReturnVar = GPIO_NOK ;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	08 95       	ret
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	08 95       	ret
 1b0:	80 e0       	ldi	r24, 0x00	; 0
	{
		ReturnVar = GPIO_NOK ;
	}

	return ReturnVar;
}
 1b2:	08 95       	ret

000001b4 <GPIO_Read>:
GPIO_CheckType GPIO_Read(uint8_t GroupId,uint8_t* GroupDataPtr)
{

	const GPIO_CfgType * CfgRead;
		GPIO_CheckType RetVar;
		if (( GroupId <GPIO_GROUPS_NUMBER))
 1b4:	80 31       	cpi	r24, 0x10	; 16
 1b6:	30 f5       	brcc	.+76     	; 0x204 <GPIO_Read+0x50>
			{
			    CfgRead = &GPIO_ConfigParam[GroupId];
 1b8:	90 e0       	ldi	r25, 0x00	; 0
				if ((CfgRead->PortDirection == 0x00)&&(GPIO_GroupState[GroupId]==1 ))
 1ba:	fc 01       	movw	r30, r24
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	ec 59       	subi	r30, 0x9C	; 156
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	22 81       	ldd	r18, Z+2	; 0x02
 1ca:	21 11       	cpse	r18, r1
 1cc:	1d c0       	rjmp	.+58     	; 0x208 <GPIO_Read+0x54>
 1ce:	fc 01       	movw	r30, r24
 1d0:	ee 50       	subi	r30, 0x0E	; 14
 1d2:	ff 4f       	sbci	r31, 0xFF	; 255
 1d4:	20 81       	ld	r18, Z
 1d6:	21 30       	cpi	r18, 0x01	; 1
 1d8:	c9 f4       	brne	.+50     	; 0x20c <GPIO_Read+0x58>
				{
                   *GroupDataPtr = (GPIODATA_READ(CfgRead->PortMask,CfgRead->PortId) & (CfgRead->PortMask) );
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	fc 01       	movw	r30, r24
 1e4:	ec 59       	subi	r30, 0x9C	; 156
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	a0 81       	ld	r26, Z
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	a0 5a       	subi	r26, 0xA0	; 160
 1ee:	bf 4f       	sbci	r27, 0xFF	; 255
 1f0:	ac 91       	ld	r26, X
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	12 97       	sbiw	r26, 0x02	; 2
 1f6:	8c 91       	ld	r24, X
 1f8:	91 81       	ldd	r25, Z+1	; 0x01
 1fa:	89 23       	and	r24, r25
 1fc:	fb 01       	movw	r30, r22
 1fe:	80 83       	st	Z, r24
                   RetVar = GPIO_OK;
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	08 95       	ret
				 }

			}
			else
			{
				RetVar = GPIO_NOK ;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	08 95       	ret
                   *GroupDataPtr = (GPIODATA_READ(CfgRead->PortMask,CfgRead->PortId) & (CfgRead->PortMask) );
                   RetVar = GPIO_OK;
				}
				else
				 {
					 RetVar = GPIO_NOK ;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	08 95       	ret
 20c:	81 e0       	ldi	r24, 0x01	; 1
			{
				RetVar = GPIO_NOK ;
			}

			return RetVar;
}
 20e:	08 95       	ret

00000210 <getkey>:
#include "GPIO.h"
#include "GPIO_Cfg.h"

unsigned char Data ; 
char getkey()
{
 210:	cf 92       	push	r12
 212:	df 92       	push	r13
 214:	ef 92       	push	r14
 216:	ff 92       	push	r15
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
	int i, j;
	for(i = Row0; i <= Row3; i++)
 21e:	e1 2c       	mov	r14, r1
 220:	f1 2c       	mov	r15, r1
	{
		GPIO_Write(Row0,0xff);
 222:	6f ef       	ldi	r22, 0xFF	; 255
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
		GPIO_Write(Row1,0xff);
 22a:	6f ef       	ldi	r22, 0xFF	; 255
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
		GPIO_Write(Row2,0xff);
 232:	6f ef       	ldi	r22, 0xFF	; 255
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
		GPIO_Write(Row3,0xff);
 23a:	6f ef       	ldi	r22, 0xFF	; 255
 23c:	83 e0       	ldi	r24, 0x03	; 3
 23e:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
		
		GPIO_Write(i,0x00);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	8e 2d       	mov	r24, r14
 246:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
 24a:	04 e0       	ldi	r16, 0x04	; 4
 24c:	10 e0       	ldi	r17, 0x00	; 0
 24e:	0f 2e       	mov	r0, r31
 250:	f5 e0       	ldi	r31, 0x05	; 5
 252:	cf 2e       	mov	r12, r31
 254:	d1 2c       	mov	r13, r1
 256:	f0 2d       	mov	r31, r0
 258:	05 c0       	rjmp	.+10     	; 0x264 <getkey+0x54>
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	c8 1a       	sub	r12, r24
 25e:	d8 0a       	sbc	r13, r24
 260:	0f 5f       	subi	r16, 0xFF	; 255
 262:	1f 4f       	sbci	r17, 0xFF	; 255

		for(j = Col0 ; j <= Col3 ; j++)
		{
			GPIO_Read(j,&Data);
 264:	c0 2f       	mov	r28, r16
 266:	64 e0       	ldi	r22, 0x04	; 4
 268:	71 e0       	ldi	r23, 0x01	; 1
 26a:	80 2f       	mov	r24, r16
 26c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <GPIO_Read>
			if(Data == 0x00)//check if key is pressed
 270:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Data>
 274:	81 11       	cpse	r24, r1
 276:	51 c0       	rjmp	.+162    	; 0x31a <getkey+0x10a>
			{
				while(Data == 0x00) {GPIO_Read(j,&Data);}  //wait for key to be released
 278:	64 e0       	ldi	r22, 0x04	; 4
 27a:	71 e0       	ldi	r23, 0x01	; 1
 27c:	8c 2f       	mov	r24, r28
 27e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <GPIO_Read>
 282:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Data>
 286:	88 23       	and	r24, r24
 288:	b9 f3       	breq	.-18     	; 0x278 <getkey+0x68>
				switch(i)
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	e8 16       	cp	r14, r24
 28e:	f1 04       	cpc	r15, r1
 290:	e9 f0       	breq	.+58     	; 0x2cc <getkey+0xbc>
 292:	24 f4       	brge	.+8      	; 0x29c <getkey+0x8c>
 294:	e1 14       	cp	r14, r1
 296:	f1 04       	cpc	r15, r1
 298:	51 f0       	breq	.+20     	; 0x2ae <getkey+0x9e>
 29a:	3f c0       	rjmp	.+126    	; 0x31a <getkey+0x10a>
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	e8 16       	cp	r14, r24
 2a0:	f1 04       	cpc	r15, r1
 2a2:	09 f1       	breq	.+66     	; 0x2e6 <getkey+0xd6>
 2a4:	83 e0       	ldi	r24, 0x03	; 3
 2a6:	e8 16       	cp	r14, r24
 2a8:	f1 04       	cpc	r15, r1
 2aa:	51 f1       	breq	.+84     	; 0x300 <getkey+0xf0>
 2ac:	36 c0       	rjmp	.+108    	; 0x31a <getkey+0x10a>
				{
					case(Row0):
					{
						if      (j == Col0) return '7';
 2ae:	04 30       	cpi	r16, 0x04	; 4
 2b0:	11 05       	cpc	r17, r1
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <getkey+0xa6>
 2b4:	41 c0       	rjmp	.+130    	; 0x338 <getkey+0x128>
						else if (j == Col1) return '8';
 2b6:	05 30       	cpi	r16, 0x05	; 5
 2b8:	11 05       	cpc	r17, r1
 2ba:	09 f4       	brne	.+2      	; 0x2be <getkey+0xae>
 2bc:	3f c0       	rjmp	.+126    	; 0x33c <getkey+0x12c>
						else if (j == Col2) return '9';
 2be:	06 30       	cpi	r16, 0x06	; 6
 2c0:	11 05       	cpc	r17, r1
 2c2:	f1 f1       	breq	.+124    	; 0x340 <getkey+0x130>
						else if (j == Col3) return '/';
 2c4:	07 30       	cpi	r16, 0x07	; 7
 2c6:	11 05       	cpc	r17, r1
 2c8:	41 f5       	brne	.+80     	; 0x31a <getkey+0x10a>
 2ca:	3c c0       	rjmp	.+120    	; 0x344 <getkey+0x134>
						break;
					}
					case(Row1):
					{
						if      (j == Col0) return '4';
 2cc:	04 30       	cpi	r16, 0x04	; 4
 2ce:	11 05       	cpc	r17, r1
 2d0:	d9 f1       	breq	.+118    	; 0x348 <getkey+0x138>
						else if (j == Col1) return '5';
 2d2:	05 30       	cpi	r16, 0x05	; 5
 2d4:	11 05       	cpc	r17, r1
 2d6:	d1 f1       	breq	.+116    	; 0x34c <getkey+0x13c>
						else if (j == Col2) return '6';
 2d8:	06 30       	cpi	r16, 0x06	; 6
 2da:	11 05       	cpc	r17, r1
 2dc:	c9 f1       	breq	.+114    	; 0x350 <getkey+0x140>
						else if (j == Col3) return '*';
 2de:	07 30       	cpi	r16, 0x07	; 7
 2e0:	11 05       	cpc	r17, r1
 2e2:	d9 f4       	brne	.+54     	; 0x31a <getkey+0x10a>
 2e4:	37 c0       	rjmp	.+110    	; 0x354 <getkey+0x144>
						break;
					}
					case(Row2):
					{
						if      (j == Col0) return '1';
 2e6:	04 30       	cpi	r16, 0x04	; 4
 2e8:	11 05       	cpc	r17, r1
 2ea:	b1 f1       	breq	.+108    	; 0x358 <getkey+0x148>
						else if (j == Col1) return '2';
 2ec:	05 30       	cpi	r16, 0x05	; 5
 2ee:	11 05       	cpc	r17, r1
 2f0:	a9 f1       	breq	.+106    	; 0x35c <getkey+0x14c>
						else if (j == Col2) return '3';
 2f2:	06 30       	cpi	r16, 0x06	; 6
 2f4:	11 05       	cpc	r17, r1
 2f6:	a1 f1       	breq	.+104    	; 0x360 <getkey+0x150>
						else if (j == Col3) return '-';
 2f8:	07 30       	cpi	r16, 0x07	; 7
 2fa:	11 05       	cpc	r17, r1
 2fc:	71 f4       	brne	.+28     	; 0x31a <getkey+0x10a>
 2fe:	32 c0       	rjmp	.+100    	; 0x364 <getkey+0x154>
						break;
					}
					case(Row3):
					{
						if      (j == Col0) return '?';
 300:	04 30       	cpi	r16, 0x04	; 4
 302:	11 05       	cpc	r17, r1
 304:	89 f1       	breq	.+98     	; 0x368 <getkey+0x158>
						else if (j == Col1) return '0';
 306:	05 30       	cpi	r16, 0x05	; 5
 308:	11 05       	cpc	r17, r1
 30a:	81 f1       	breq	.+96     	; 0x36c <getkey+0x15c>
						else if (j == Col2) return '=';
 30c:	06 30       	cpi	r16, 0x06	; 6
 30e:	11 05       	cpc	r17, r1
 310:	79 f1       	breq	.+94     	; 0x370 <getkey+0x160>
						else if (j == Col3) return '+';
 312:	07 30       	cpi	r16, 0x07	; 7
 314:	11 05       	cpc	r17, r1
 316:	81 f5       	brne	.+96     	; 0x378 <getkey+0x168>
 318:	2d c0       	rjmp	.+90     	; 0x374 <getkey+0x164>
		GPIO_Write(Row2,0xff);
		GPIO_Write(Row3,0xff);
		
		GPIO_Write(i,0x00);

		for(j = Col0 ; j <= Col3 ; j++)
 31a:	88 e0       	ldi	r24, 0x08	; 8
 31c:	c8 16       	cp	r12, r24
 31e:	d1 04       	cpc	r13, r1
 320:	0c f4       	brge	.+2      	; 0x324 <getkey+0x114>
 322:	9b cf       	rjmp	.-202    	; 0x25a <getkey+0x4a>

unsigned char Data ; 
char getkey()
{
	int i, j;
	for(i = Row0; i <= Row3; i++)
 324:	8f ef       	ldi	r24, 0xFF	; 255
 326:	e8 1a       	sub	r14, r24
 328:	f8 0a       	sbc	r15, r24
 32a:	84 e0       	ldi	r24, 0x04	; 4
 32c:	e8 16       	cp	r14, r24
 32e:	f1 04       	cpc	r15, r1
 330:	09 f0       	breq	.+2      	; 0x334 <getkey+0x124>
 332:	77 cf       	rjmp	.-274    	; 0x222 <getkey+0x12>
					}
				}
			}
		}
	}
	return 'F';//Return 'A' if no key is pressed.
 334:	86 e4       	ldi	r24, 0x46	; 70
 336:	26 c0       	rjmp	.+76     	; 0x384 <getkey+0x174>
				while(Data == 0x00) {GPIO_Read(j,&Data);}  //wait for key to be released
				switch(i)
				{
					case(Row0):
					{
						if      (j == Col0) return '7';
 338:	87 e3       	ldi	r24, 0x37	; 55
 33a:	24 c0       	rjmp	.+72     	; 0x384 <getkey+0x174>
						else if (j == Col1) return '8';
 33c:	88 e3       	ldi	r24, 0x38	; 56
 33e:	22 c0       	rjmp	.+68     	; 0x384 <getkey+0x174>
						else if (j == Col2) return '9';
 340:	89 e3       	ldi	r24, 0x39	; 57
 342:	20 c0       	rjmp	.+64     	; 0x384 <getkey+0x174>
						else if (j == Col3) return '/';
 344:	8f e2       	ldi	r24, 0x2F	; 47
 346:	1e c0       	rjmp	.+60     	; 0x384 <getkey+0x174>
						break;
					}
					case(Row1):
					{
						if      (j == Col0) return '4';
 348:	84 e3       	ldi	r24, 0x34	; 52
 34a:	1c c0       	rjmp	.+56     	; 0x384 <getkey+0x174>
						else if (j == Col1) return '5';
 34c:	85 e3       	ldi	r24, 0x35	; 53
 34e:	1a c0       	rjmp	.+52     	; 0x384 <getkey+0x174>
						else if (j == Col2) return '6';
 350:	86 e3       	ldi	r24, 0x36	; 54
 352:	18 c0       	rjmp	.+48     	; 0x384 <getkey+0x174>
						else if (j == Col3) return '*';
 354:	8a e2       	ldi	r24, 0x2A	; 42
 356:	16 c0       	rjmp	.+44     	; 0x384 <getkey+0x174>
						break;
					}
					case(Row2):
					{
						if      (j == Col0) return '1';
 358:	81 e3       	ldi	r24, 0x31	; 49
 35a:	14 c0       	rjmp	.+40     	; 0x384 <getkey+0x174>
						else if (j == Col1) return '2';
 35c:	82 e3       	ldi	r24, 0x32	; 50
 35e:	12 c0       	rjmp	.+36     	; 0x384 <getkey+0x174>
						else if (j == Col2) return '3';
 360:	83 e3       	ldi	r24, 0x33	; 51
 362:	10 c0       	rjmp	.+32     	; 0x384 <getkey+0x174>
						else if (j == Col3) return '-';
 364:	8d e2       	ldi	r24, 0x2D	; 45
 366:	0e c0       	rjmp	.+28     	; 0x384 <getkey+0x174>
						break;
					}
					case(Row3):
					{
						if      (j == Col0) return '?';
 368:	8f e3       	ldi	r24, 0x3F	; 63
 36a:	0c c0       	rjmp	.+24     	; 0x384 <getkey+0x174>
						else if (j == Col1) return '0';
 36c:	80 e3       	ldi	r24, 0x30	; 48
 36e:	0a c0       	rjmp	.+20     	; 0x384 <getkey+0x174>
						else if (j == Col2) return '=';
 370:	8d e3       	ldi	r24, 0x3D	; 61
 372:	08 c0       	rjmp	.+16     	; 0x384 <getkey+0x174>
						else if (j == Col3) return '+';
 374:	8b e2       	ldi	r24, 0x2B	; 43
 376:	06 c0       	rjmp	.+12     	; 0x384 <getkey+0x174>
		GPIO_Write(Row2,0xff);
		GPIO_Write(Row3,0xff);
		
		GPIO_Write(i,0x00);

		for(j = Col0 ; j <= Col3 ; j++)
 378:	88 e0       	ldi	r24, 0x08	; 8
 37a:	c8 16       	cp	r12, r24
 37c:	d1 04       	cpc	r13, r1
 37e:	0c f4       	brge	.+2      	; 0x382 <getkey+0x172>
 380:	6c cf       	rjmp	.-296    	; 0x25a <getkey+0x4a>
					}
				}
			}
		}
	}
	return 'F';//Return 'A' if no key is pressed.
 382:	86 e4       	ldi	r24, 0x46	; 70
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	ff 90       	pop	r15
 38c:	ef 90       	pop	r14
 38e:	df 90       	pop	r13
 390:	cf 90       	pop	r12
 392:	08 95       	ret

00000394 <Delay>:
GPIO_Write(EN_GROUP_IDX,0x00);
#endif
Delay(2000);
	}
void Delay(unsigned int DelayVal)
{
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	00 d0       	rcall	.+0      	; 0x39a <Delay+0x6>
 39a:	00 d0       	rcall	.+0      	; 0x39c <Delay+0x8>
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
	volatile long int i;
	for(i = 0; i < (DelayVal*4); i++);
 3a0:	19 82       	std	Y+1, r1	; 0x01
 3a2:	1a 82       	std	Y+2, r1	; 0x02
 3a4:	1b 82       	std	Y+3, r1	; 0x03
 3a6:	1c 82       	std	Y+4, r1	; 0x04
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	a0 e0       	ldi	r26, 0x00	; 0
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	49 81       	ldd	r20, Y+1	; 0x01
 3b6:	5a 81       	ldd	r21, Y+2	; 0x02
 3b8:	6b 81       	ldd	r22, Y+3	; 0x03
 3ba:	7c 81       	ldd	r23, Y+4	; 0x04
 3bc:	48 17       	cp	r20, r24
 3be:	59 07       	cpc	r21, r25
 3c0:	6a 07       	cpc	r22, r26
 3c2:	7b 07       	cpc	r23, r27
 3c4:	ac f4       	brge	.+42     	; 0x3f0 <Delay+0x5c>
 3c6:	49 81       	ldd	r20, Y+1	; 0x01
 3c8:	5a 81       	ldd	r21, Y+2	; 0x02
 3ca:	6b 81       	ldd	r22, Y+3	; 0x03
 3cc:	7c 81       	ldd	r23, Y+4	; 0x04
 3ce:	4f 5f       	subi	r20, 0xFF	; 255
 3d0:	5f 4f       	sbci	r21, 0xFF	; 255
 3d2:	6f 4f       	sbci	r22, 0xFF	; 255
 3d4:	7f 4f       	sbci	r23, 0xFF	; 255
 3d6:	49 83       	std	Y+1, r20	; 0x01
 3d8:	5a 83       	std	Y+2, r21	; 0x02
 3da:	6b 83       	std	Y+3, r22	; 0x03
 3dc:	7c 83       	std	Y+4, r23	; 0x04
 3de:	49 81       	ldd	r20, Y+1	; 0x01
 3e0:	5a 81       	ldd	r21, Y+2	; 0x02
 3e2:	6b 81       	ldd	r22, Y+3	; 0x03
 3e4:	7c 81       	ldd	r23, Y+4	; 0x04
 3e6:	48 17       	cp	r20, r24
 3e8:	59 07       	cpc	r21, r25
 3ea:	6a 07       	cpc	r22, r26
 3ec:	7b 07       	cpc	r23, r27
 3ee:	5c f3       	brlt	.-42     	; 0x3c6 <Delay+0x32>
	}
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <SendCmd>:
	RetVar=LCD_OK;
   }else {RetVar=LCD_NOK;}
  return RetVar ; 
}
static void SendCmd(unsigned char CmdId)
{
 3fe:	cf 92       	push	r12
 400:	df 92       	push	r13
 402:	ef 92       	push	r14
 404:	ff 92       	push	r15
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	c8 2f       	mov	r28, r24
	int i;
	unsigned char GpioData,Cmd1;
GPIO_Write(RS_GROUP_IDX,0x00);
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	88 e0       	ldi	r24, 0x08	; 8
 414:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
GPIO_Write(RW_GROUP_IDX,0x00);
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	89 e0       	ldi	r24, 0x09	; 9
 41c:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
	}
    GPIO_Write(EN_GROUP_IDX,0xff);
    Delay(100);
    GPIO_Write(EN_GROUP_IDX,0x00);
#else
Cmd1 = (CmdId & 0xF0) >> 4;
 420:	dc 2f       	mov	r29, r28
 422:	d2 95       	swap	r29
 424:	df 70       	andi	r29, 0x0F	; 15
 426:	04 ea       	ldi	r16, 0xA4	; 164
 428:	10 e0       	ldi	r17, 0x00	; 0
 42a:	0f 2e       	mov	r0, r31
 42c:	f8 ea       	ldi	r31, 0xA8	; 168
 42e:	ef 2e       	mov	r14, r31
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	ff 2e       	mov	r15, r31
 434:	f0 2d       	mov	r31, r0
 436:	68 01       	movw	r12, r16
for(i = 0; i < 4; i++)
{
    GpioData = Cmd1 & 0x01;
    GpioData = (~GpioData) + 1;
    Cmd1 = Cmd1 >> 1;
    GPIO_Write(DataPinsIdx[i],GpioData);
 438:	6d 2f       	mov	r22, r29
 43a:	61 70       	andi	r22, 0x01	; 1
 43c:	61 95       	neg	r22
 43e:	d6 95       	lsr	r29
 440:	f6 01       	movw	r30, r12
 442:	81 91       	ld	r24, Z+
 444:	6f 01       	movw	r12, r30
 446:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
    GPIO_Write(EN_GROUP_IDX,0xff);
    Delay(100);
    GPIO_Write(EN_GROUP_IDX,0x00);
#else
Cmd1 = (CmdId & 0xF0) >> 4;
for(i = 0; i < 4; i++)
 44a:	ec 14       	cp	r14, r12
 44c:	fd 04       	cpc	r15, r13
 44e:	a1 f7       	brne	.-24     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
    GpioData = (~GpioData) + 1;
    Cmd1 = Cmd1 >> 1;
    GPIO_Write(DataPinsIdx[i],GpioData);

	}
GPIO_Write(EN_GROUP_IDX,0xff);
 450:	6f ef       	ldi	r22, 0xFF	; 255
 452:	8a e0       	ldi	r24, 0x0A	; 10
 454:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
Delay(100);
 458:	84 e6       	ldi	r24, 0x64	; 100
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 ca 01 	call	0x394	; 0x394 <Delay>
GPIO_Write(EN_GROUP_IDX,0x00);
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	8a e0       	ldi	r24, 0x0A	; 10
 464:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
Cmd1 = (CmdId & 0x0f);
 468:	cf 70       	andi	r28, 0x0F	; 15
for(i = 0; i < 4; i++)
{
    GpioData = Cmd1 & 0x01;
    GpioData = (~GpioData) + 1;
    Cmd1 = Cmd1 >> 1;
    GPIO_Write(DataPinsIdx[i],GpioData);
 46a:	6c 2f       	mov	r22, r28
 46c:	61 70       	andi	r22, 0x01	; 1
 46e:	61 95       	neg	r22
 470:	c6 95       	lsr	r28
 472:	f8 01       	movw	r30, r16
 474:	81 91       	ld	r24, Z+
 476:	8f 01       	movw	r16, r30
 478:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
	}
GPIO_Write(EN_GROUP_IDX,0xff);
Delay(100);
GPIO_Write(EN_GROUP_IDX,0x00);
Cmd1 = (CmdId & 0x0f);
for(i = 0; i < 4; i++)
 47c:	0e 15       	cp	r16, r14
 47e:	1f 05       	cpc	r17, r15
 480:	a1 f7       	brne	.-24     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
    GpioData = (~GpioData) + 1;
    Cmd1 = Cmd1 >> 1;
    GPIO_Write(DataPinsIdx[i],GpioData);

	}
GPIO_Write(EN_GROUP_IDX,0xff);
 482:	6f ef       	ldi	r22, 0xFF	; 255
 484:	8a e0       	ldi	r24, 0x0A	; 10
 486:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
Delay(100);
 48a:	84 e6       	ldi	r24, 0x64	; 100
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 ca 01 	call	0x394	; 0x394 <Delay>
GPIO_Write(EN_GROUP_IDX,0x00);
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	8a e0       	ldi	r24, 0x0A	; 10
 496:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
#endif
Delay(2000);
 49a:	80 ed       	ldi	r24, 0xD0	; 208
 49c:	97 e0       	ldi	r25, 0x07	; 7
 49e:	0e 94 ca 01 	call	0x394	; 0x394 <Delay>
	}
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	1f 91       	pop	r17
 4a8:	0f 91       	pop	r16
 4aa:	ff 90       	pop	r15
 4ac:	ef 90       	pop	r14
 4ae:	df 90       	pop	r13
 4b0:	cf 90       	pop	r12
 4b2:	08 95       	ret

000004b4 <SendData>:
	volatile long int i;
	for(i = 0; i < (DelayVal*4); i++);
	}

static void SendData(unsigned char DataId)
{
 4b4:	cf 92       	push	r12
 4b6:	df 92       	push	r13
 4b8:	ef 92       	push	r14
 4ba:	ff 92       	push	r15
 4bc:	0f 93       	push	r16
 4be:	1f 93       	push	r17
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	c8 2f       	mov	r28, r24
	int i;
	unsigned char GpioData,Cmd1;
GPIO_Write(RS_GROUP_IDX,0xff);
 4c6:	6f ef       	ldi	r22, 0xFF	; 255
 4c8:	88 e0       	ldi	r24, 0x08	; 8
 4ca:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
GPIO_Write(RW_GROUP_IDX,0x00);
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	89 e0       	ldi	r24, 0x09	; 9
 4d2:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
	}
    GPIO_Write(EN_GROUP_IDX,0xff);
    Delay(100);
    GPIO_Write(EN_GROUP_IDX,0x00);
#else
Cmd1 = (DataId & 0xF0) >> 4;
 4d6:	dc 2f       	mov	r29, r28
 4d8:	d2 95       	swap	r29
 4da:	df 70       	andi	r29, 0x0F	; 15
 4dc:	04 ea       	ldi	r16, 0xA4	; 164
 4de:	10 e0       	ldi	r17, 0x00	; 0
 4e0:	0f 2e       	mov	r0, r31
 4e2:	f8 ea       	ldi	r31, 0xA8	; 168
 4e4:	ef 2e       	mov	r14, r31
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	ff 2e       	mov	r15, r31
 4ea:	f0 2d       	mov	r31, r0
 4ec:	68 01       	movw	r12, r16
for(i = 0; i < 4; i++)
{
    GpioData = Cmd1 & 0x01;
    GpioData = (~GpioData) + 1;
    Cmd1 = Cmd1 >> 1;
    GPIO_Write(DataPinsIdx[i],GpioData);
 4ee:	6d 2f       	mov	r22, r29
 4f0:	61 70       	andi	r22, 0x01	; 1
 4f2:	61 95       	neg	r22
 4f4:	d6 95       	lsr	r29
 4f6:	f6 01       	movw	r30, r12
 4f8:	81 91       	ld	r24, Z+
 4fa:	6f 01       	movw	r12, r30
 4fc:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
    GPIO_Write(EN_GROUP_IDX,0xff);
    Delay(100);
    GPIO_Write(EN_GROUP_IDX,0x00);
#else
Cmd1 = (DataId & 0xF0) >> 4;
for(i = 0; i < 4; i++)
 500:	ec 14       	cp	r14, r12
 502:	fd 04       	cpc	r15, r13
 504:	a1 f7       	brne	.-24     	; 0x4ee <SendData+0x3a>
    GpioData = (~GpioData) + 1;
    Cmd1 = Cmd1 >> 1;
    GPIO_Write(DataPinsIdx[i],GpioData);

	}
GPIO_Write(EN_GROUP_IDX,0xff);
 506:	6f ef       	ldi	r22, 0xFF	; 255
 508:	8a e0       	ldi	r24, 0x0A	; 10
 50a:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
Delay(100);
 50e:	84 e6       	ldi	r24, 0x64	; 100
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 ca 01 	call	0x394	; 0x394 <Delay>
GPIO_Write(EN_GROUP_IDX,0x00);
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	8a e0       	ldi	r24, 0x0A	; 10
 51a:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
Cmd1 = (DataId & 0x0f);
 51e:	cf 70       	andi	r28, 0x0F	; 15
for(i = 0; i < 4; i++)
{
    GpioData = Cmd1 & 0x01;
    GpioData = (~GpioData) + 1;
    Cmd1 = Cmd1 >> 1;
    GPIO_Write(DataPinsIdx[i],GpioData);
 520:	6c 2f       	mov	r22, r28
 522:	61 70       	andi	r22, 0x01	; 1
 524:	61 95       	neg	r22
 526:	c6 95       	lsr	r28
 528:	f8 01       	movw	r30, r16
 52a:	81 91       	ld	r24, Z+
 52c:	8f 01       	movw	r16, r30
 52e:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
	}
GPIO_Write(EN_GROUP_IDX,0xff);
Delay(100);
GPIO_Write(EN_GROUP_IDX,0x00);
Cmd1 = (DataId & 0x0f);
for(i = 0; i < 4; i++)
 532:	0e 15       	cp	r16, r14
 534:	1f 05       	cpc	r17, r15
 536:	a1 f7       	brne	.-24     	; 0x520 <SendData+0x6c>
    GpioData = (~GpioData) + 1;
    Cmd1 = Cmd1 >> 1;
    GPIO_Write(DataPinsIdx[i],GpioData);

	}
GPIO_Write(EN_GROUP_IDX,0xff);
 538:	6f ef       	ldi	r22, 0xFF	; 255
 53a:	8a e0       	ldi	r24, 0x0A	; 10
 53c:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
Delay(100);
 540:	84 e6       	ldi	r24, 0x64	; 100
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 ca 01 	call	0x394	; 0x394 <Delay>
GPIO_Write(EN_GROUP_IDX,0x00);
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	8a e0       	ldi	r24, 0x0A	; 10
 54c:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
#endif
Delay(10);
 550:	8a e0       	ldi	r24, 0x0A	; 10
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 ca 01 	call	0x394	; 0x394 <Delay>
	}
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	1f 91       	pop	r17
 55e:	0f 91       	pop	r16
 560:	ff 90       	pop	r15
 562:	ef 90       	pop	r14
 564:	df 90       	pop	r13
 566:	cf 90       	pop	r12
 568:	08 95       	ret

0000056a <LCD_Init>:
		                       DB6_GROUP_IDX,DB7_GROUP_IDX};
#endif
static int InitState = 0;
void LCD_Init(void)
{
  Delay(15000);
 56a:	88 e9       	ldi	r24, 0x98	; 152
 56c:	9a e3       	ldi	r25, 0x3A	; 58
 56e:	0e 94 ca 01 	call	0x394	; 0x394 <Delay>
#if DATA_MODE == DATA_MODE_4
  SendCmd(0x33);
 572:	83 e3       	ldi	r24, 0x33	; 51
 574:	0e 94 ff 01 	call	0x3fe	; 0x3fe <SendCmd>
  SendCmd(0x32);
 578:	82 e3       	ldi	r24, 0x32	; 50
 57a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <SendCmd>
  SendCmd(0x28);
 57e:	88 e2       	ldi	r24, 0x28	; 40
 580:	0e 94 ff 01 	call	0x3fe	; 0x3fe <SendCmd>
#else
  SendCmd(0x38);
#endif

#if CURSOR_MODE == CURSOR_OFF
  SendCmd(0x0C);
 584:	8c e0       	ldi	r24, 0x0C	; 12
 586:	0e 94 ff 01 	call	0x3fe	; 0x3fe <SendCmd>
#else
  SendCmd(0x0E);
#endif
  SendCmd(0x01);
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <SendCmd>
  InitState = 1;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <InitState+0x1>
 598:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <InitState>
 59c:	08 95       	ret

0000059e <LCD_DispChar>:
	}
LCD_ChkType LCD_DispChar(char Data)
{
	LCD_ChkType RetVar;
	if(InitState == 1)
 59e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <InitState>
 5a2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <InitState+0x1>
 5a6:	21 30       	cpi	r18, 0x01	; 1
 5a8:	31 05       	cpc	r19, r1
 5aa:	21 f4       	brne	.+8      	; 0x5b4 <LCD_DispChar+0x16>
	{
	SendData(Data);
 5ac:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <SendData>
	RetVar = LCD_OK;
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	08 95       	ret
	}
	else
	{
	RetVar = LCD_NOK;
 5b4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return RetVar;
}
 5b6:	08 95       	ret

000005b8 <LCD_SetCursPos>:

LCD_ChkType LCD_SetCursPos(int x,int y)
{
	LCD_ChkType RetVar ;
  if(InitState == 1)
 5b8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <InitState>
 5bc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <InitState+0x1>
 5c0:	21 30       	cpi	r18, 0x01	; 1
 5c2:	31 05       	cpc	r19, r1
 5c4:	61 f4       	brne	.+24     	; 0x5de <LCD_SetCursPos+0x26>
  {
	if(y == 0)
 5c6:	67 2b       	or	r22, r23
 5c8:	29 f4       	brne	.+10     	; 0x5d4 <LCD_SetCursPos+0x1c>
	{
		SendCmd(0x80 + x);
 5ca:	80 58       	subi	r24, 0x80	; 128
 5cc:	0e 94 ff 01 	call	0x3fe	; 0x3fe <SendCmd>
	}
	else
	{
		SendCmd(0xC0 + x);
	}
	RetVar=LCD_OK ;
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	08 95       	ret
	{
		SendCmd(0x80 + x);
	}
	else
	{
		SendCmd(0xC0 + x);
 5d4:	80 54       	subi	r24, 0x40	; 64
 5d6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <SendCmd>
	}
	RetVar=LCD_OK ;
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	08 95       	ret
	
  }else {RetVar=LCD_NOK;}
 5de:	81 e0       	ldi	r24, 0x01	; 1
	return RetVar ; 
}
 5e0:	08 95       	ret

000005e2 <LCD_Clear>:
LCD_ChkType LCD_Clear(void)
{
	LCD_ChkType RetVar ;
  if(InitState == 1)
 5e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <InitState>
 5e6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <InitState+0x1>
 5ea:	01 97       	sbiw	r24, 0x01	; 1
 5ec:	29 f4       	brne	.+10     	; 0x5f8 <LCD_Clear+0x16>
  {
	SendCmd(0x01);
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <SendCmd>
	RetVar=LCD_OK;
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	08 95       	ret
	}else {RetVar=LCD_NOK;}
 5f8:	81 e0       	ldi	r24, 0x01	; 1
  return RetVar ; 
}
 5fa:	08 95       	ret

000005fc <LCD_DispString>:
LCD_ChkType LCD_DispString(char* StrPtr)
{
 5fc:	cf 93       	push	r28
 5fe:	df 93       	push	r29
 600:	ec 01       	movw	r28, r24
	LCD_ChkType RetVar ;
  if(InitState == 1)
 602:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <InitState>
 606:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <InitState+0x1>
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	51 f4       	brne	.+20     	; 0x622 <LCD_DispString+0x26>
  {
	while((*StrPtr) != '\0')
 60e:	88 81       	ld	r24, Y
 610:	88 23       	and	r24, r24
 612:	49 f0       	breq	.+18     	; 0x626 <LCD_DispString+0x2a>
 614:	21 96       	adiw	r28, 0x01	; 1
	{
		SendData(*StrPtr);
 616:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <SendData>
LCD_ChkType LCD_DispString(char* StrPtr)
{
	LCD_ChkType RetVar ;
  if(InitState == 1)
  {
	while((*StrPtr) != '\0')
 61a:	89 91       	ld	r24, Y+
 61c:	81 11       	cpse	r24, r1
 61e:	fb cf       	rjmp	.-10     	; 0x616 <LCD_DispString+0x1a>
 620:	03 c0       	rjmp	.+6      	; 0x628 <LCD_DispString+0x2c>
		SendData(*StrPtr);
		StrPtr ++;
	}
	
	RetVar=LCD_OK;
   }else {RetVar=LCD_NOK;}
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	01 c0       	rjmp	.+2      	; 0x628 <LCD_DispString+0x2c>
	{
		SendData(*StrPtr);
		StrPtr ++;
	}
	
	RetVar=LCD_OK;
 626:	80 e0       	ldi	r24, 0x00	; 0
   }else {RetVar=LCD_NOK;}
  return RetVar ; 
}
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	08 95       	ret

0000062e <check_password>:
			check_password();
    }
}

void check_password()
{
 62e:	1f 93       	push	r17
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
	unsigned char check_char;
	uint8_t j = 0;
	uint8_t flag = 0;
	
	
	while((EEPROM_read(10) != 2) && (EEPROM_read(11) != 1))
 634:	64 c0       	rjmp	.+200    	; 0x6fe <check_password+0xd0>
	{
		LCD_SetCursPos(0,0);
 636:	60 e0       	ldi	r22, 0x00	; 0
 638:	70 e0       	ldi	r23, 0x00	; 0
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_SetCursPos>
		LCD_DispString("Enter Password");
 642:	88 ea       	ldi	r24, 0xA8	; 168
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 fe 02 	call	0x5fc	; 0x5fc <LCD_DispString>
		LCD_SetCursPos(j,1);
 64a:	61 e0       	ldi	r22, 0x01	; 1
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	8d 2f       	mov	r24, r29
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_SetCursPos>
		check_char = getkey();
 656:	0e 94 08 01 	call	0x210	; 0x210 <getkey>
 65a:	c8 2f       	mov	r28, r24
		
		if(check_char != 'F')
 65c:	86 34       	cpi	r24, 0x46	; 70
 65e:	09 f4       	brne	.+2      	; 0x662 <check_password+0x34>
 660:	50 c0       	rjmp	.+160    	; 0x702 <check_password+0xd4>
		{
			if(check_char == EEPROM_read(j))
 662:	8d 2f       	mov	r24, r29
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_read>
 66a:	c8 13       	cpse	r28, r24
 66c:	01 c0       	rjmp	.+2      	; 0x670 <check_password+0x42>
			{
				flag++;
 66e:	1f 5f       	subi	r17, 0xFF	; 255
			}
			j++;
 670:	df 5f       	subi	r29, 0xFF	; 255
			LCD_DispChar('*');
 672:	8a e2       	ldi	r24, 0x2A	; 42
 674:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_DispChar>
		}
		
		if (check_char == '=')
 678:	cd 33       	cpi	r28, 0x3D	; 61
 67a:	09 f0       	breq	.+2      	; 0x67e <check_password+0x50>
 67c:	42 c0       	rjmp	.+132    	; 0x702 <check_password+0xd4>
		{
			if (j == (flag + 1))
 67e:	8d 2f       	mov	r24, r29
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	21 2f       	mov	r18, r17
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	2f 5f       	subi	r18, 0xFF	; 255
 688:	3f 4f       	sbci	r19, 0xFF	; 255
 68a:	82 17       	cp	r24, r18
 68c:	93 07       	cpc	r25, r19
 68e:	b1 f4       	brne	.+44     	; 0x6bc <check_password+0x8e>
			{
				LCD_Clear();
 690:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_Clear>
				LCD_SetCursPos(0,0);
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_SetCursPos>
				LCD_DispString("Door Unlocked");
 6a0:	87 eb       	ldi	r24, 0xB7	; 183
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 fe 02 	call	0x5fc	; 0x5fc <LCD_DispString>
				EEPROM_write(11,1);
 6a8:	61 e0       	ldi	r22, 0x01	; 1
 6aa:	8b e0       	ldi	r24, 0x0B	; 11
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_write>
				j = 0;
				flag = 0;
				GPIO_Write(15,0xff);
 6b2:	6f ef       	ldi	r22, 0xFF	; 255
 6b4:	8f e0       	ldi	r24, 0x0F	; 15
 6b6:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
 6ba:	21 c0       	rjmp	.+66     	; 0x6fe <check_password+0xd0>
			}
			else
			{
				LCD_Clear();
 6bc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_Clear>
				LCD_SetCursPos(0,0);
 6c0:	60 e0       	ldi	r22, 0x00	; 0
 6c2:	70 e0       	ldi	r23, 0x00	; 0
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_SetCursPos>
				LCD_DispString("Wrong Password");
 6cc:	85 ec       	ldi	r24, 0xC5	; 197
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <LCD_DispString>
				flag = 0;
				j = 0;
				EEPROM_write(10,EEPROM_read(10)+1);
 6d4:	8a e0       	ldi	r24, 0x0A	; 10
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_read>
 6dc:	61 e0       	ldi	r22, 0x01	; 1
 6de:	68 0f       	add	r22, r24
 6e0:	8a e0       	ldi	r24, 0x0A	; 10
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6e8:	2f ef       	ldi	r18, 0xFF	; 255
 6ea:	87 ea       	ldi	r24, 0xA7	; 167
 6ec:	91 e6       	ldi	r25, 0x61	; 97
 6ee:	21 50       	subi	r18, 0x01	; 1
 6f0:	80 40       	sbci	r24, 0x00	; 0
 6f2:	90 40       	sbci	r25, 0x00	; 0
 6f4:	e1 f7       	brne	.-8      	; 0x6ee <check_password+0xc0>
 6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <check_password+0xca>
 6f8:	00 00       	nop
				_delay_ms(2000);
				LCD_Clear();
 6fa:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_Clear>
			check_password();
    }
}

void check_password()
{
 6fe:	10 e0       	ldi	r17, 0x00	; 0
 700:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char check_char;
	uint8_t j = 0;
	uint8_t flag = 0;
	
	
	while((EEPROM_read(10) != 2) && (EEPROM_read(11) != 1))
 702:	8a e0       	ldi	r24, 0x0A	; 10
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_read>
 70a:	82 30       	cpi	r24, 0x02	; 2
 70c:	39 f0       	breq	.+14     	; 0x71c <check_password+0xee>
 70e:	8b e0       	ldi	r24, 0x0B	; 11
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_read>
 716:	81 30       	cpi	r24, 0x01	; 1
 718:	09 f0       	breq	.+2      	; 0x71c <check_password+0xee>
 71a:	8d cf       	rjmp	.-230    	; 0x636 <check_password+0x8>
				LCD_Clear();
			}
		}	
	}
	
	if (EEPROM_read(10) == 2)
 71c:	8a e0       	ldi	r24, 0x0A	; 10
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 51 00 	call	0xa2	; 0xa2 <EEPROM_read>
 724:	82 30       	cpi	r24, 0x02	; 2
 726:	51 f4       	brne	.+20     	; 0x73c <check_password+0x10e>
	{
		LCD_SetCursPos(0,0);
 728:	60 e0       	ldi	r22, 0x00	; 0
 72a:	70 e0       	ldi	r23, 0x00	; 0
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_SetCursPos>
		LCD_DispString("Door Blocked");
 734:	84 ed       	ldi	r24, 0xD4	; 212
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 fe 02 	call	0x5fc	; 0x5fc <LCD_DispString>
	}

}
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	1f 91       	pop	r17
 742:	08 95       	ret

00000744 <__vector_1>:
#include <util/delay.h>

void check_password();

ISR(INT0_vect)
{
 744:	1f 92       	push	r1
 746:	0f 92       	push	r0
 748:	0f b6       	in	r0, 0x3f	; 63
 74a:	0f 92       	push	r0
 74c:	11 24       	eor	r1, r1
 74e:	2f 93       	push	r18
 750:	3f 93       	push	r19
 752:	4f 93       	push	r20
 754:	5f 93       	push	r21
 756:	6f 93       	push	r22
 758:	7f 93       	push	r23
 75a:	8f 93       	push	r24
 75c:	9f 93       	push	r25
 75e:	af 93       	push	r26
 760:	bf 93       	push	r27
 762:	ef 93       	push	r30
 764:	ff 93       	push	r31
	LCD_Clear();
 766:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_Clear>
	LCD_SetCursPos(0,0);
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_SetCursPos>
	LCD_DispString("System Resetted");
 776:	81 ee       	ldi	r24, 0xE1	; 225
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <LCD_DispString>
 77e:	2f ef       	ldi	r18, 0xFF	; 255
 780:	83 ed       	ldi	r24, 0xD3	; 211
 782:	90 e3       	ldi	r25, 0x30	; 48
 784:	21 50       	subi	r18, 0x01	; 1
 786:	80 40       	sbci	r24, 0x00	; 0
 788:	90 40       	sbci	r25, 0x00	; 0
 78a:	e1 f7       	brne	.-8      	; 0x784 <__vector_1+0x40>
 78c:	00 c0       	rjmp	.+0      	; 0x78e <__vector_1+0x4a>
 78e:	00 00       	nop
	_delay_ms(1000);
	EEPROM_write(10,0);
 790:	60 e0       	ldi	r22, 0x00	; 0
 792:	8a e0       	ldi	r24, 0x0A	; 10
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_write>
	EEPROM_write(11,0);
 79a:	60 e0       	ldi	r22, 0x00	; 0
 79c:	8b e0       	ldi	r24, 0x0B	; 11
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_write>
	LCD_Clear();
 7a4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_Clear>
	check_password();
 7a8:	0e 94 17 03 	call	0x62e	; 0x62e <check_password>
}
 7ac:	ff 91       	pop	r31
 7ae:	ef 91       	pop	r30
 7b0:	bf 91       	pop	r27
 7b2:	af 91       	pop	r26
 7b4:	9f 91       	pop	r25
 7b6:	8f 91       	pop	r24
 7b8:	7f 91       	pop	r23
 7ba:	6f 91       	pop	r22
 7bc:	5f 91       	pop	r21
 7be:	4f 91       	pop	r20
 7c0:	3f 91       	pop	r19
 7c2:	2f 91       	pop	r18
 7c4:	0f 90       	pop	r0
 7c6:	0f be       	out	0x3f, r0	; 63
 7c8:	0f 90       	pop	r0
 7ca:	1f 90       	pop	r1
 7cc:	18 95       	reti

000007ce <main>:

int main(void)
{
    /* Replace with your application code */
    EEPROM_write(0,'0');	
 7ce:	60 e3       	ldi	r22, 0x30	; 48
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_write>
	EEPROM_write(1,'1');
 7d8:	61 e3       	ldi	r22, 0x31	; 49
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_write>
	EEPROM_write(2,'2');
 7e2:	62 e3       	ldi	r22, 0x32	; 50
 7e4:	82 e0       	ldi	r24, 0x02	; 2
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_write>
	EEPROM_write(3,'3');
 7ec:	63 e3       	ldi	r22, 0x33	; 51
 7ee:	83 e0       	ldi	r24, 0x03	; 3
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_write>
	EEPROM_write(10,0);
 7f6:	60 e0       	ldi	r22, 0x00	; 0
 7f8:	8a e0       	ldi	r24, 0x0A	; 10
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_write>
	EEPROM_write(11,0);
 800:	60 e0       	ldi	r22, 0x00	; 0
 802:	8b e0       	ldi	r24, 0x0B	; 11
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_write>
	
    GPIO_Init();
 80a:	0e 94 58 00 	call	0xb0	; 0xb0 <GPIO_Init>
    LCD_Init();
 80e:	0e 94 b5 02 	call	0x56a	; 0x56a <LCD_Init>
	//MCUCR = 1 << 2;
	GICR = (1 << INT0);
 812:	80 e4       	ldi	r24, 0x40	; 64
 814:	8b bf       	out	0x3b, r24	; 59
	sei();
 816:	78 94       	sei
	
	GPIO_Write(15,0x00);
 818:	60 e0       	ldi	r22, 0x00	; 0
 81a:	8f e0       	ldi	r24, 0x0F	; 15
 81c:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Write>
	
    while (1) 
    {
			check_password();
 820:	0e 94 17 03 	call	0x62e	; 0x62e <check_password>
 824:	fd cf       	rjmp	.-6      	; 0x820 <main+0x52>

00000826 <_exit>:
 826:	f8 94       	cli

00000828 <__stop_program>:
 828:	ff cf       	rjmp	.-2      	; 0x828 <__stop_program>
